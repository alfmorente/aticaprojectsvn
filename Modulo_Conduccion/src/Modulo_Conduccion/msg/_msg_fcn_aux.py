"""autogenerated by genpy from Modulo_Conduccion/msg_fcn_aux.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class msg_fcn_aux(genpy.Message):
  _md5sum = "5ac596cebd65fb2d60c3c460c58ab4a2"
  _type = "Modulo_Conduccion/msg_fcn_aux"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool type_msg
uint8 function
bool value      

"""
  __slots__ = ['type_msg','function','value']
  _slot_types = ['bool','uint8','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type_msg,function,value

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(msg_fcn_aux, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.type_msg is None:
        self.type_msg = False
      if self.function is None:
        self.function = 0
      if self.value is None:
        self.value = False
    else:
      self.type_msg = False
      self.function = 0
      self.value = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3B.pack(_x.type_msg, _x.function, _x.value))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.type_msg, _x.function, _x.value,) = _struct_3B.unpack(str[start:end])
      self.type_msg = bool(self.type_msg)
      self.value = bool(self.value)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3B.pack(_x.type_msg, _x.function, _x.value))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.type_msg, _x.function, _x.value,) = _struct_3B.unpack(str[start:end])
      self.type_msg = bool(self.type_msg)
      self.value = bool(self.value)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3B = struct.Struct("<3B")
