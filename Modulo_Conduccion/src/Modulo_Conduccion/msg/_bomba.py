"""autogenerated by genpy from Modulo_Conduccion/bomba.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class bomba(genpy.Message):
  _md5sum = "bdb7d191e409324f9e33d915b1c8707b"
  _type = "Modulo_Conduccion/bomba"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Desacelerar presion (comando=0, value=0)
# Acelerar presion (comando=0, value=1)
# Valvula  cisterna OFF (comando=1, value=0)
# Valvula  cisterna ON  (comando=1, value=1)
# Valvula  autollenado OFF (comando=2, value=0)
# Valvula  autollenado ON (comando=2, value=1)
# Valvula  monitor OFF (comando=3, value=0)
# Valvula  monitor ON (comando=3, value=1)
# Movimiento PAN izquierda (comando=4, value=0)
# Movimiento PAN derecha   (comando=4, value=1)
# Movimiento PAN Stop (comando=4, value=2)
# Movimiento TILT arriba (comando=5, value=1)
# Movimiento tilt abajo (comando=5, value=0)
# Movimiento Tilt Stop (comando=5,value=0)
# Tipo de chorro CHORRO (comando 6,value=0)
# Tipo de chorro NIEBLA (comando 6,value=1)

int8 comando
int8 value

"""
  __slots__ = ['comando','value']
  _slot_types = ['int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       comando,value

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(bomba, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.comando is None:
        self.comando = 0
      if self.value is None:
        self.value = 0
    else:
      self.comando = 0
      self.value = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2b.pack(_x.comando, _x.value))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.comando, _x.value,) = _struct_2b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2b.pack(_x.comando, _x.value))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.comando, _x.value,) = _struct_2b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2b = struct.Struct("<2b")
