/* Auto-generated by genmsg_cpp for file /home/atica/catkin_ws/src/Modulo_Conduccion/msg/messageCAN.msg */
#ifndef MODULO_CONDUCCION_MESSAGE_MESSAGECAN_H
#define MODULO_CONDUCCION_MESSAGE_MESSAGECAN_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Modulo_Conduccion
{
template <class ContainerAllocator>
struct messageCAN_ {
  typedef messageCAN_<ContainerAllocator> Type;

  messageCAN_()
  : senal(0)
  , opcion_etc1()
  , revoluciones_etc1(0.0)
  , porcentaje_etc1(0.0)
  , revoluciones2_etc1(0.0)
  , revoluciones_eec1(0.0)
  , porcentaje_eec1(0.0)
  , marcha(0.0)
  , marcha_2(0.0)
  , marcha_3(0.0)
  , opcion_ebc1()
  , porcentaje_ebc1(0.0)
  , opcion_ccvs()
  , km_h_ccvs(0.0)
  , opcion2_ccvs()
  , opcion3_ccvs()
  , opcion4_ccvs()
  , pto_state_ccvs()
  , opcion_aux()
  , opcion2_aux()
  , opcion3_aux()
  , opcion_eec2()
  , opcion2_eec2()
  , porcentaje_eec2(0.0)
  , porcentaje2_eec2(0.0)
  , grados_et(0.0)
  , grados2_et(0.0)
  , grados3_et(0.0)
  , bares_ef(0.0)
  , bares_sp(0.0)
  , bares2_sp(0.0)
  , bares3_sp(0.0)
  , bares4_sp(0.0)
  , bares5_sp(0.0)
  , bares6_sp(0.0)
  , bares_ac(0.0)
  , grados_ac(0.0)
  , kilometros_vdhr(0.0)
  , axle()
  , kilogramos_vheacs(0.0)
  , horas(0.0)
  , driverWorking1()
  , driverWorking2()
  , opcion_t()
  , driverTime1()
  , opcion2_t()
  , opcion3_t()
  , driverTime2()
  , opcion4_t()
  , opcion5_t()
  , opcion6_t()
  , opcion7_t()
  , km_h_t(0.0)
  , porcentaje_erc(0.0)
  , opcion_auxstat()
  , opcion2_auxstat()
  , litros(0.0)
  , km_l(0.0)
  , opcion_etc3()
  , opcion2_etc3()
  , pto1state()
  , pto2state()
  , nmvstate()
  {
  }

  messageCAN_(const ContainerAllocator& _alloc)
  : senal(0)
  , opcion_etc1(_alloc)
  , revoluciones_etc1(0.0)
  , porcentaje_etc1(0.0)
  , revoluciones2_etc1(0.0)
  , revoluciones_eec1(0.0)
  , porcentaje_eec1(0.0)
  , marcha(0.0)
  , marcha_2(0.0)
  , marcha_3(0.0)
  , opcion_ebc1(_alloc)
  , porcentaje_ebc1(0.0)
  , opcion_ccvs(_alloc)
  , km_h_ccvs(0.0)
  , opcion2_ccvs(_alloc)
  , opcion3_ccvs(_alloc)
  , opcion4_ccvs(_alloc)
  , pto_state_ccvs(_alloc)
  , opcion_aux(_alloc)
  , opcion2_aux(_alloc)
  , opcion3_aux(_alloc)
  , opcion_eec2(_alloc)
  , opcion2_eec2(_alloc)
  , porcentaje_eec2(0.0)
  , porcentaje2_eec2(0.0)
  , grados_et(0.0)
  , grados2_et(0.0)
  , grados3_et(0.0)
  , bares_ef(0.0)
  , bares_sp(0.0)
  , bares2_sp(0.0)
  , bares3_sp(0.0)
  , bares4_sp(0.0)
  , bares5_sp(0.0)
  , bares6_sp(0.0)
  , bares_ac(0.0)
  , grados_ac(0.0)
  , kilometros_vdhr(0.0)
  , axle(_alloc)
  , kilogramos_vheacs(0.0)
  , horas(0.0)
  , driverWorking1(_alloc)
  , driverWorking2(_alloc)
  , opcion_t(_alloc)
  , driverTime1(_alloc)
  , opcion2_t(_alloc)
  , opcion3_t(_alloc)
  , driverTime2(_alloc)
  , opcion4_t(_alloc)
  , opcion5_t(_alloc)
  , opcion6_t(_alloc)
  , opcion7_t(_alloc)
  , km_h_t(0.0)
  , porcentaje_erc(0.0)
  , opcion_auxstat(_alloc)
  , opcion2_auxstat(_alloc)
  , litros(0.0)
  , km_l(0.0)
  , opcion_etc3(_alloc)
  , opcion2_etc3(_alloc)
  , pto1state(_alloc)
  , pto2state(_alloc)
  , nmvstate(_alloc)
  {
  }

  typedef int8_t _senal_type;
  int8_t senal;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _opcion_etc1_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  opcion_etc1;

  typedef double _revoluciones_etc1_type;
  double revoluciones_etc1;

  typedef double _porcentaje_etc1_type;
  double porcentaje_etc1;

  typedef double _revoluciones2_etc1_type;
  double revoluciones2_etc1;

  typedef double _revoluciones_eec1_type;
  double revoluciones_eec1;

  typedef double _porcentaje_eec1_type;
  double porcentaje_eec1;

  typedef double _marcha_type;
  double marcha;

  typedef double _marcha_2_type;
  double marcha_2;

  typedef double _marcha_3_type;
  double marcha_3;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _opcion_ebc1_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  opcion_ebc1;

  typedef double _porcentaje_ebc1_type;
  double porcentaje_ebc1;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _opcion_ccvs_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  opcion_ccvs;

  typedef double _km_h_ccvs_type;
  double km_h_ccvs;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _opcion2_ccvs_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  opcion2_ccvs;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _opcion3_ccvs_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  opcion3_ccvs;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _opcion4_ccvs_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  opcion4_ccvs;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pto_state_ccvs_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  pto_state_ccvs;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _opcion_aux_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  opcion_aux;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _opcion2_aux_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  opcion2_aux;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _opcion3_aux_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  opcion3_aux;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _opcion_eec2_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  opcion_eec2;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _opcion2_eec2_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  opcion2_eec2;

  typedef double _porcentaje_eec2_type;
  double porcentaje_eec2;

  typedef double _porcentaje2_eec2_type;
  double porcentaje2_eec2;

  typedef double _grados_et_type;
  double grados_et;

  typedef double _grados2_et_type;
  double grados2_et;

  typedef double _grados3_et_type;
  double grados3_et;

  typedef double _bares_ef_type;
  double bares_ef;

  typedef double _bares_sp_type;
  double bares_sp;

  typedef double _bares2_sp_type;
  double bares2_sp;

  typedef double _bares3_sp_type;
  double bares3_sp;

  typedef double _bares4_sp_type;
  double bares4_sp;

  typedef double _bares5_sp_type;
  double bares5_sp;

  typedef double _bares6_sp_type;
  double bares6_sp;

  typedef double _bares_ac_type;
  double bares_ac;

  typedef double _grados_ac_type;
  double grados_ac;

  typedef double _kilometros_vdhr_type;
  double kilometros_vdhr;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _axle_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  axle;

  typedef double _kilogramos_vheacs_type;
  double kilogramos_vheacs;

  typedef double _horas_type;
  double horas;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _driverWorking1_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  driverWorking1;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _driverWorking2_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  driverWorking2;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _opcion_t_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  opcion_t;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _driverTime1_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  driverTime1;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _opcion2_t_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  opcion2_t;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _opcion3_t_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  opcion3_t;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _driverTime2_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  driverTime2;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _opcion4_t_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  opcion4_t;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _opcion5_t_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  opcion5_t;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _opcion6_t_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  opcion6_t;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _opcion7_t_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  opcion7_t;

  typedef double _km_h_t_type;
  double km_h_t;

  typedef double _porcentaje_erc_type;
  double porcentaje_erc;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _opcion_auxstat_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  opcion_auxstat;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _opcion2_auxstat_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  opcion2_auxstat;

  typedef double _litros_type;
  double litros;

  typedef double _km_l_type;
  double km_l;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _opcion_etc3_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  opcion_etc3;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _opcion2_etc3_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  opcion2_etc3;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pto1state_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  pto1state;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pto2state_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  pto2state;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _nmvstate_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  nmvstate;


  typedef boost::shared_ptr< ::Modulo_Conduccion::messageCAN_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Modulo_Conduccion::messageCAN_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct messageCAN
typedef  ::Modulo_Conduccion::messageCAN_<std::allocator<void> > messageCAN;

typedef boost::shared_ptr< ::Modulo_Conduccion::messageCAN> messageCANPtr;
typedef boost::shared_ptr< ::Modulo_Conduccion::messageCAN const> messageCANConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Modulo_Conduccion::messageCAN_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Modulo_Conduccion::messageCAN_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Modulo_Conduccion

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Modulo_Conduccion::messageCAN_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Modulo_Conduccion::messageCAN_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Modulo_Conduccion::messageCAN_<ContainerAllocator> > {
  static const char* value() 
  {
    return "02717f479fdfd6d478732dcace63ec89";
  }

  static const char* value(const  ::Modulo_Conduccion::messageCAN_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x02717f479fdfd6d4ULL;
  static const uint64_t static_value2 = 0x78732dcace63ec89ULL;
};

template<class ContainerAllocator>
struct DataType< ::Modulo_Conduccion::messageCAN_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Modulo_Conduccion/messageCAN";
  }

  static const char* value(const  ::Modulo_Conduccion::messageCAN_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Modulo_Conduccion::messageCAN_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Single scan from a Bus CAN\n\
\n\
int8 senal\n\
\n\
\n\
# Señal 1 - ELECTRONIC TRANSMISSION CONTROLLER1\n\
string opcion_etc1		#string\n\
float64 revoluciones_etc1	#double\n\
float64 porcentaje_etc1		#double\n\
float64 revoluciones2_etc1	#double\n\
\n\
\n\
# Señal 2 - ELECTRONIC ENGINE CONTROLLER1\n\
float64 revoluciones_eec1	#double\n\
float64 porcentaje_eec1		#double (entero)\n\
\n\
\n\
# Señal 3 - ELECTRONIC TRANSMISSION CONTROLLER2\n\
float64 marcha			#double (entero)\n\
float64 marcha_2		#double\n\
float64 marcha_3		#double (entero)\n\
\n\
\n\
# Señal 4 - ELECTRONIC BRAKE CONTROLLER1\n\
string opcion_ebc1		#string\n\
float64 porcentaje_ebc1		#double\n\
\n\
\n\
# Señal 5 - CRUISE CONTROL VEHICULE SPEED\n\
string opcion_ccvs		#string\n\
float64 km_h_ccvs		#double\n\
string opcion2_ccvs		#string\n\
string opcion3_ccvs		#string\n\
string opcion4_ccvs		#string\n\
string pto_state_ccvs		#string\n\
\n\
\n\
# Señal 6 - AUXILIARY STATE\n\
string opcion_aux		#string\n\
string opcion2_aux		#string\n\
string opcion3_aux		#string\n\
\n\
\n\
# Señal 7 - ELECTRONIC ENGINE CONTROLLER2\n\
string opcion_eec2		#string\n\
string opcion2_eec2		#string\n\
float64 porcentaje_eec2		#double\n\
float64 porcentaje2_eec2	#double\n\
\n\
\n\
# Señal 8 - ENGINE TEMPERATURE\n\
float64 grados_et		#double (entero)\n\
float64 grados2_et		#double (entero)\n\
float64 grados3_et		#double\n\
\n\
\n\
# Señal 9 - ENGINE FLUID\n\
float64 bares_ef		#double\n\
\n\
\n\
# Señal 10 - SUPPLY PRESSURE \n\
float64 bares_sp		#double\n\
float64 bares2_sp		#double\n\
float64 bares3_sp		#double\n\
float64 bares4_sp		#double\n\
float64 bares5_sp		#double\n\
float64 bares6_sp		#double\n\
\n\
\n\
# Señal 11 - AMBIENT CONDITIONS\n\
float64 bares_ac		#double\n\
float64 grados_ac		#double\n\
\n\
\n\
# Señal 12 - VEHICULE DISTANCE HIGH RESOLUTION\n\
float64 kilometros_vdhr		#double\n\
\n\
\n\
# Señal 13 - VEHICULE WEIGHT\n\
string axle			#string\n\
float64 kilogramos_vheacs	#double\n\
\n\
\n\
# Señal 14 - ENGINE HOURS\n\
float64 horas			#double\n\
\n\
\n\
# Señal 15 - TACOGRAPH\n\
string driverWorking1		#string\n\
string driverWorking2		#string\n\
string opcion_t			#string\n\
string driverTime1		#string\n\
string opcion2_t		#string\n\
string opcion3_t		#string\n\
string driverTime2		#string\n\
string opcion4_t		#string\n\
string opcion5_t		#string\n\
string opcion6_t		#string\n\
string opcion7_t		#string\n\
float64 km_h_t			#double\n\
\n\
\n\
# Señal 16 - ELECTRONIC RETARDER CONTROLLER EXHAUST\n\
float64 porcentaje_erc		#double (entero)\n\
\n\
\n\
# Señal 17 - AUX STAT\n\
string opcion_auxstat		#string\n\
string opcion2_auxstat		#string\n\
\n\
\n\
# Señal 18 - FUEL ECONOMY\n\
float64 litros			#double\n\
float64 km_l			#double\n\
\n\
\n\
# Señal 19 - ELECTRONIC TRANSMISSION CONTROLLER3 \n\
string opcion_etc3		#string\n\
string opcion2_etc3		#string\n\
string pto1state		#string\n\
string pto2state		#string\n\
string nmvstate			#string\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::Modulo_Conduccion::messageCAN_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Modulo_Conduccion::messageCAN_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.senal);
    stream.next(m.opcion_etc1);
    stream.next(m.revoluciones_etc1);
    stream.next(m.porcentaje_etc1);
    stream.next(m.revoluciones2_etc1);
    stream.next(m.revoluciones_eec1);
    stream.next(m.porcentaje_eec1);
    stream.next(m.marcha);
    stream.next(m.marcha_2);
    stream.next(m.marcha_3);
    stream.next(m.opcion_ebc1);
    stream.next(m.porcentaje_ebc1);
    stream.next(m.opcion_ccvs);
    stream.next(m.km_h_ccvs);
    stream.next(m.opcion2_ccvs);
    stream.next(m.opcion3_ccvs);
    stream.next(m.opcion4_ccvs);
    stream.next(m.pto_state_ccvs);
    stream.next(m.opcion_aux);
    stream.next(m.opcion2_aux);
    stream.next(m.opcion3_aux);
    stream.next(m.opcion_eec2);
    stream.next(m.opcion2_eec2);
    stream.next(m.porcentaje_eec2);
    stream.next(m.porcentaje2_eec2);
    stream.next(m.grados_et);
    stream.next(m.grados2_et);
    stream.next(m.grados3_et);
    stream.next(m.bares_ef);
    stream.next(m.bares_sp);
    stream.next(m.bares2_sp);
    stream.next(m.bares3_sp);
    stream.next(m.bares4_sp);
    stream.next(m.bares5_sp);
    stream.next(m.bares6_sp);
    stream.next(m.bares_ac);
    stream.next(m.grados_ac);
    stream.next(m.kilometros_vdhr);
    stream.next(m.axle);
    stream.next(m.kilogramos_vheacs);
    stream.next(m.horas);
    stream.next(m.driverWorking1);
    stream.next(m.driverWorking2);
    stream.next(m.opcion_t);
    stream.next(m.driverTime1);
    stream.next(m.opcion2_t);
    stream.next(m.opcion3_t);
    stream.next(m.driverTime2);
    stream.next(m.opcion4_t);
    stream.next(m.opcion5_t);
    stream.next(m.opcion6_t);
    stream.next(m.opcion7_t);
    stream.next(m.km_h_t);
    stream.next(m.porcentaje_erc);
    stream.next(m.opcion_auxstat);
    stream.next(m.opcion2_auxstat);
    stream.next(m.litros);
    stream.next(m.km_l);
    stream.next(m.opcion_etc3);
    stream.next(m.opcion2_etc3);
    stream.next(m.pto1state);
    stream.next(m.pto2state);
    stream.next(m.nmvstate);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct messageCAN_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Modulo_Conduccion::messageCAN_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Modulo_Conduccion::messageCAN_<ContainerAllocator> & v) 
  {
    s << indent << "senal: ";
    Printer<int8_t>::stream(s, indent + "  ", v.senal);
    s << indent << "opcion_etc1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.opcion_etc1);
    s << indent << "revoluciones_etc1: ";
    Printer<double>::stream(s, indent + "  ", v.revoluciones_etc1);
    s << indent << "porcentaje_etc1: ";
    Printer<double>::stream(s, indent + "  ", v.porcentaje_etc1);
    s << indent << "revoluciones2_etc1: ";
    Printer<double>::stream(s, indent + "  ", v.revoluciones2_etc1);
    s << indent << "revoluciones_eec1: ";
    Printer<double>::stream(s, indent + "  ", v.revoluciones_eec1);
    s << indent << "porcentaje_eec1: ";
    Printer<double>::stream(s, indent + "  ", v.porcentaje_eec1);
    s << indent << "marcha: ";
    Printer<double>::stream(s, indent + "  ", v.marcha);
    s << indent << "marcha_2: ";
    Printer<double>::stream(s, indent + "  ", v.marcha_2);
    s << indent << "marcha_3: ";
    Printer<double>::stream(s, indent + "  ", v.marcha_3);
    s << indent << "opcion_ebc1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.opcion_ebc1);
    s << indent << "porcentaje_ebc1: ";
    Printer<double>::stream(s, indent + "  ", v.porcentaje_ebc1);
    s << indent << "opcion_ccvs: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.opcion_ccvs);
    s << indent << "km_h_ccvs: ";
    Printer<double>::stream(s, indent + "  ", v.km_h_ccvs);
    s << indent << "opcion2_ccvs: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.opcion2_ccvs);
    s << indent << "opcion3_ccvs: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.opcion3_ccvs);
    s << indent << "opcion4_ccvs: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.opcion4_ccvs);
    s << indent << "pto_state_ccvs: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pto_state_ccvs);
    s << indent << "opcion_aux: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.opcion_aux);
    s << indent << "opcion2_aux: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.opcion2_aux);
    s << indent << "opcion3_aux: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.opcion3_aux);
    s << indent << "opcion_eec2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.opcion_eec2);
    s << indent << "opcion2_eec2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.opcion2_eec2);
    s << indent << "porcentaje_eec2: ";
    Printer<double>::stream(s, indent + "  ", v.porcentaje_eec2);
    s << indent << "porcentaje2_eec2: ";
    Printer<double>::stream(s, indent + "  ", v.porcentaje2_eec2);
    s << indent << "grados_et: ";
    Printer<double>::stream(s, indent + "  ", v.grados_et);
    s << indent << "grados2_et: ";
    Printer<double>::stream(s, indent + "  ", v.grados2_et);
    s << indent << "grados3_et: ";
    Printer<double>::stream(s, indent + "  ", v.grados3_et);
    s << indent << "bares_ef: ";
    Printer<double>::stream(s, indent + "  ", v.bares_ef);
    s << indent << "bares_sp: ";
    Printer<double>::stream(s, indent + "  ", v.bares_sp);
    s << indent << "bares2_sp: ";
    Printer<double>::stream(s, indent + "  ", v.bares2_sp);
    s << indent << "bares3_sp: ";
    Printer<double>::stream(s, indent + "  ", v.bares3_sp);
    s << indent << "bares4_sp: ";
    Printer<double>::stream(s, indent + "  ", v.bares4_sp);
    s << indent << "bares5_sp: ";
    Printer<double>::stream(s, indent + "  ", v.bares5_sp);
    s << indent << "bares6_sp: ";
    Printer<double>::stream(s, indent + "  ", v.bares6_sp);
    s << indent << "bares_ac: ";
    Printer<double>::stream(s, indent + "  ", v.bares_ac);
    s << indent << "grados_ac: ";
    Printer<double>::stream(s, indent + "  ", v.grados_ac);
    s << indent << "kilometros_vdhr: ";
    Printer<double>::stream(s, indent + "  ", v.kilometros_vdhr);
    s << indent << "axle: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.axle);
    s << indent << "kilogramos_vheacs: ";
    Printer<double>::stream(s, indent + "  ", v.kilogramos_vheacs);
    s << indent << "horas: ";
    Printer<double>::stream(s, indent + "  ", v.horas);
    s << indent << "driverWorking1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.driverWorking1);
    s << indent << "driverWorking2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.driverWorking2);
    s << indent << "opcion_t: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.opcion_t);
    s << indent << "driverTime1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.driverTime1);
    s << indent << "opcion2_t: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.opcion2_t);
    s << indent << "opcion3_t: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.opcion3_t);
    s << indent << "driverTime2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.driverTime2);
    s << indent << "opcion4_t: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.opcion4_t);
    s << indent << "opcion5_t: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.opcion5_t);
    s << indent << "opcion6_t: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.opcion6_t);
    s << indent << "opcion7_t: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.opcion7_t);
    s << indent << "km_h_t: ";
    Printer<double>::stream(s, indent + "  ", v.km_h_t);
    s << indent << "porcentaje_erc: ";
    Printer<double>::stream(s, indent + "  ", v.porcentaje_erc);
    s << indent << "opcion_auxstat: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.opcion_auxstat);
    s << indent << "opcion2_auxstat: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.opcion2_auxstat);
    s << indent << "litros: ";
    Printer<double>::stream(s, indent + "  ", v.litros);
    s << indent << "km_l: ";
    Printer<double>::stream(s, indent + "  ", v.km_l);
    s << indent << "opcion_etc3: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.opcion_etc3);
    s << indent << "opcion2_etc3: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.opcion2_etc3);
    s << indent << "pto1state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pto1state);
    s << indent << "pto2state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pto2state);
    s << indent << "nmvstate: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.nmvstate);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MODULO_CONDUCCION_MESSAGE_MESSAGECAN_H

