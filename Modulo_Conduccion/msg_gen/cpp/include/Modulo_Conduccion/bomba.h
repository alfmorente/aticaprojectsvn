/* Auto-generated by genmsg_cpp for file /home/atica/catkin_ws/src/Modulo_Conduccion/msg/bomba.msg */
#ifndef MODULO_CONDUCCION_MESSAGE_BOMBA_H
#define MODULO_CONDUCCION_MESSAGE_BOMBA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Modulo_Conduccion
{
template <class ContainerAllocator>
struct bomba_ {
  typedef bomba_<ContainerAllocator> Type;

  bomba_()
  : comando(0)
  , value(0)
  {
  }

  bomba_(const ContainerAllocator& _alloc)
  : comando(0)
  , value(0)
  {
  }

  typedef int8_t _comando_type;
  int8_t comando;

  typedef int8_t _value_type;
  int8_t value;


  typedef boost::shared_ptr< ::Modulo_Conduccion::bomba_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Modulo_Conduccion::bomba_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct bomba
typedef  ::Modulo_Conduccion::bomba_<std::allocator<void> > bomba;

typedef boost::shared_ptr< ::Modulo_Conduccion::bomba> bombaPtr;
typedef boost::shared_ptr< ::Modulo_Conduccion::bomba const> bombaConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Modulo_Conduccion::bomba_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Modulo_Conduccion::bomba_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Modulo_Conduccion

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Modulo_Conduccion::bomba_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Modulo_Conduccion::bomba_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Modulo_Conduccion::bomba_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bdb7d191e409324f9e33d915b1c8707b";
  }

  static const char* value(const  ::Modulo_Conduccion::bomba_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbdb7d191e409324fULL;
  static const uint64_t static_value2 = 0x9e33d915b1c8707bULL;
};

template<class ContainerAllocator>
struct DataType< ::Modulo_Conduccion::bomba_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Modulo_Conduccion/bomba";
  }

  static const char* value(const  ::Modulo_Conduccion::bomba_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Modulo_Conduccion::bomba_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Desacelerar presion (comando=0, value=0)\n\
# Acelerar presion (comando=0, value=1)\n\
# Valvula  cisterna OFF (comando=1, value=0)\n\
# Valvula  cisterna ON  (comando=1, value=1)\n\
# Valvula  autollenado OFF (comando=2, value=0)\n\
# Valvula  autollenado ON (comando=2, value=1)\n\
# Valvula  monitor OFF (comando=3, value=0)\n\
# Valvula  monitor ON (comando=3, value=1)\n\
# Movimiento PAN izquierda (comando=4, value=0)\n\
# Movimiento PAN derecha   (comando=4, value=1)\n\
# Movimiento PAN Stop (comando=4, value=2)\n\
# Movimiento TILT arriba (comando=5, value=1)\n\
# Movimiento tilt abajo (comando=5, value=0)\n\
# Movimiento Tilt Stop (comando=5,value=0)\n\
# Tipo de chorro CHORRO (comando 6,value=0)\n\
# Tipo de chorro NIEBLA (comando 6,value=1)\n\
\n\
int8 comando\n\
int8 value\n\
\n\
";
  }

  static const char* value(const  ::Modulo_Conduccion::bomba_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Modulo_Conduccion::bomba_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Modulo_Conduccion::bomba_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.comando);
    stream.next(m.value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct bomba_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Modulo_Conduccion::bomba_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Modulo_Conduccion::bomba_<ContainerAllocator> & v) 
  {
    s << indent << "comando: ";
    Printer<int8_t>::stream(s, indent + "  ", v.comando);
    s << indent << "value: ";
    Printer<int8_t>::stream(s, indent + "  ", v.value);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MODULO_CONDUCCION_MESSAGE_BOMBA_H

