/* Auto-generated by genmsg_cpp for file /home/atica/catkin_ws/src/Modulo_Gest_Sistema/msg/msg_available_mode.msg */
#ifndef MODULO_GEST_SISTEMA_MESSAGE_MSG_AVAILABLE_MODE_H
#define MODULO_GEST_SISTEMA_MESSAGE_MSG_AVAILABLE_MODE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Modulo_Gest_Sistema
{
template <class ContainerAllocator>
struct msg_available_mode_ {
  typedef msg_available_mode_<ContainerAllocator> Type;

  msg_available_mode_()
  : available_mode()
  {
    available_mode.assign(false);
  }

  msg_available_mode_(const ContainerAllocator& _alloc)
  : available_mode()
  {
    available_mode.assign(false);
  }

  typedef boost::array<uint8_t, 12>  _available_mode_type;
  boost::array<uint8_t, 12>  available_mode;


  typedef boost::shared_ptr< ::Modulo_Gest_Sistema::msg_available_mode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Modulo_Gest_Sistema::msg_available_mode_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct msg_available_mode
typedef  ::Modulo_Gest_Sistema::msg_available_mode_<std::allocator<void> > msg_available_mode;

typedef boost::shared_ptr< ::Modulo_Gest_Sistema::msg_available_mode> msg_available_modePtr;
typedef boost::shared_ptr< ::Modulo_Gest_Sistema::msg_available_mode const> msg_available_modeConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Modulo_Gest_Sistema::msg_available_mode_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Modulo_Gest_Sistema::msg_available_mode_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Modulo_Gest_Sistema

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Modulo_Gest_Sistema::msg_available_mode_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Modulo_Gest_Sistema::msg_available_mode_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Modulo_Gest_Sistema::msg_available_mode_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3d0fd04f4ced9660c43caab85d5c5253";
  }

  static const char* value(const  ::Modulo_Gest_Sistema::msg_available_mode_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3d0fd04f4ced9660ULL;
  static const uint64_t static_value2 = 0xc43caab85d5c5253ULL;
};

template<class ContainerAllocator>
struct DataType< ::Modulo_Gest_Sistema::msg_available_mode_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Modulo_Gest_Sistema/msg_available_mode";
  }

  static const char* value(const  ::Modulo_Gest_Sistema::msg_available_mode_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Modulo_Gest_Sistema::msg_available_mode_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool[12] available_mode\n\
";
  }

  static const char* value(const  ::Modulo_Gest_Sistema::msg_available_mode_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Modulo_Gest_Sistema::msg_available_mode_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Modulo_Gest_Sistema::msg_available_mode_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.available_mode);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct msg_available_mode_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Modulo_Gest_Sistema::msg_available_mode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Modulo_Gest_Sistema::msg_available_mode_<ContainerAllocator> & v) 
  {
    s << indent << "available_mode[]" << std::endl;
    for (size_t i = 0; i < v.available_mode.size(); ++i)
    {
      s << indent << "  available_mode[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.available_mode[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // MODULO_GEST_SISTEMA_MESSAGE_MSG_AVAILABLE_MODE_H

