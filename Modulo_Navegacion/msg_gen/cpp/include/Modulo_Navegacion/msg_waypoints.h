/* Auto-generated by genmsg_cpp for file /home/atica/catkin_ws/src/Navegacion_Atica/Modulo_Navegacion/msg/msg_waypoints.msg */
#ifndef MODULO_NAVEGACION_MESSAGE_MSG_WAYPOINTS_H
#define MODULO_NAVEGACION_MESSAGE_MSG_WAYPOINTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Modulo_Navegacion
{
template <class ContainerAllocator>
struct msg_waypoints_ {
  typedef msg_waypoints_<ContainerAllocator> Type;

  msg_waypoints_()
  : waypoint_lon()
  , waypoint_lat()
  , num_waypoints(0)
  {
  }

  msg_waypoints_(const ContainerAllocator& _alloc)
  : waypoint_lon(_alloc)
  , waypoint_lat(_alloc)
  , num_waypoints(0)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _waypoint_lon_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  waypoint_lon;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _waypoint_lat_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  waypoint_lat;

  typedef uint16_t _num_waypoints_type;
  uint16_t num_waypoints;


  typedef boost::shared_ptr< ::Modulo_Navegacion::msg_waypoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Modulo_Navegacion::msg_waypoints_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct msg_waypoints
typedef  ::Modulo_Navegacion::msg_waypoints_<std::allocator<void> > msg_waypoints;

typedef boost::shared_ptr< ::Modulo_Navegacion::msg_waypoints> msg_waypointsPtr;
typedef boost::shared_ptr< ::Modulo_Navegacion::msg_waypoints const> msg_waypointsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Modulo_Navegacion::msg_waypoints_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Modulo_Navegacion::msg_waypoints_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Modulo_Navegacion

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Modulo_Navegacion::msg_waypoints_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Modulo_Navegacion::msg_waypoints_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Modulo_Navegacion::msg_waypoints_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ae90d0e56988d7d8973a5bda929d228c";
  }

  static const char* value(const  ::Modulo_Navegacion::msg_waypoints_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xae90d0e56988d7d8ULL;
  static const uint64_t static_value2 = 0x973a5bda929d228cULL;
};

template<class ContainerAllocator>
struct DataType< ::Modulo_Navegacion::msg_waypoints_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Modulo_Navegacion/msg_waypoints";
  }

  static const char* value(const  ::Modulo_Navegacion::msg_waypoints_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Modulo_Navegacion::msg_waypoints_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[] waypoint_lon\n\
float32[] waypoint_lat\n\
uint16 num_waypoints\n\
\n\
";
  }

  static const char* value(const  ::Modulo_Navegacion::msg_waypoints_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Modulo_Navegacion::msg_waypoints_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.waypoint_lon);
    stream.next(m.waypoint_lat);
    stream.next(m.num_waypoints);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct msg_waypoints_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Modulo_Navegacion::msg_waypoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Modulo_Navegacion::msg_waypoints_<ContainerAllocator> & v) 
  {
    s << indent << "waypoint_lon[]" << std::endl;
    for (size_t i = 0; i < v.waypoint_lon.size(); ++i)
    {
      s << indent << "  waypoint_lon[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.waypoint_lon[i]);
    }
    s << indent << "waypoint_lat[]" << std::endl;
    for (size_t i = 0; i < v.waypoint_lat.size(); ++i)
    {
      s << indent << "  waypoint_lat[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.waypoint_lat[i]);
    }
    s << indent << "num_waypoints: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.num_waypoints);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MODULO_NAVEGACION_MESSAGE_MSG_WAYPOINTS_H

