/* Auto-generated by genmsg_cpp for file /home/atica/catkin_ws/src/Navegacion_Atica/Modulo_Navegacion/msg/msg_module_enable.msg */
#ifndef MODULO_NAVEGACION_MESSAGE_MSG_MODULE_ENABLE_H
#define MODULO_NAVEGACION_MESSAGE_MSG_MODULE_ENABLE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Modulo_Navegacion
{
template <class ContainerAllocator>
struct msg_module_enable_ {
  typedef msg_module_enable_<ContainerAllocator> Type;

  msg_module_enable_()
  : id_modulo(0)
  , submodo(0)
  , activo(0)
  {
  }

  msg_module_enable_(const ContainerAllocator& _alloc)
  : id_modulo(0)
  , submodo(0)
  , activo(0)
  {
  }

  typedef uint8_t _id_modulo_type;
  uint8_t id_modulo;

  typedef uint8_t _submodo_type;
  uint8_t submodo;

  typedef uint8_t _activo_type;
  uint8_t activo;


  typedef boost::shared_ptr< ::Modulo_Navegacion::msg_module_enable_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Modulo_Navegacion::msg_module_enable_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct msg_module_enable
typedef  ::Modulo_Navegacion::msg_module_enable_<std::allocator<void> > msg_module_enable;

typedef boost::shared_ptr< ::Modulo_Navegacion::msg_module_enable> msg_module_enablePtr;
typedef boost::shared_ptr< ::Modulo_Navegacion::msg_module_enable const> msg_module_enableConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Modulo_Navegacion::msg_module_enable_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Modulo_Navegacion::msg_module_enable_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Modulo_Navegacion

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Modulo_Navegacion::msg_module_enable_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Modulo_Navegacion::msg_module_enable_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Modulo_Navegacion::msg_module_enable_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a982f6a119e51b5cdca5954e75b06d8d";
  }

  static const char* value(const  ::Modulo_Navegacion::msg_module_enable_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa982f6a119e51b5cULL;
  static const uint64_t static_value2 = 0xdca5954e75b06d8dULL;
};

template<class ContainerAllocator>
struct DataType< ::Modulo_Navegacion::msg_module_enable_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Modulo_Navegacion/msg_module_enable";
  }

  static const char* value(const  ::Modulo_Navegacion::msg_module_enable_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Modulo_Navegacion::msg_module_enable_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 id_modulo\n\
uint8 submodo\n\
uint8 activo\n\
\n\
";
  }

  static const char* value(const  ::Modulo_Navegacion::msg_module_enable_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Modulo_Navegacion::msg_module_enable_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Modulo_Navegacion::msg_module_enable_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id_modulo);
    stream.next(m.submodo);
    stream.next(m.activo);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct msg_module_enable_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Modulo_Navegacion::msg_module_enable_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Modulo_Navegacion::msg_module_enable_<ContainerAllocator> & v) 
  {
    s << indent << "id_modulo: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id_modulo);
    s << indent << "submodo: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.submodo);
    s << indent << "activo: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activo);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MODULO_NAVEGACION_MESSAGE_MSG_MODULE_ENABLE_H

