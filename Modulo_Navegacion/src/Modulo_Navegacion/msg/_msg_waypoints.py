"""autogenerated by genpy from Modulo_Navegacion/msg_waypoints.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class msg_waypoints(genpy.Message):
  _md5sum = "ae90d0e56988d7d8973a5bda929d228c"
  _type = "Modulo_Navegacion/msg_waypoints"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32[] waypoint_lon
float32[] waypoint_lat
uint16 num_waypoints

"""
  __slots__ = ['waypoint_lon','waypoint_lat','num_waypoints']
  _slot_types = ['float32[]','float32[]','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       waypoint_lon,waypoint_lat,num_waypoints

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(msg_waypoints, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.waypoint_lon is None:
        self.waypoint_lon = []
      if self.waypoint_lat is None:
        self.waypoint_lat = []
      if self.num_waypoints is None:
        self.num_waypoints = 0
    else:
      self.waypoint_lon = []
      self.waypoint_lat = []
      self.num_waypoints = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.waypoint_lon)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.waypoint_lon))
      length = len(self.waypoint_lat)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.waypoint_lat))
      buff.write(_struct_H.pack(self.num_waypoints))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.waypoint_lon = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.waypoint_lat = struct.unpack(pattern, str[start:end])
      start = end
      end += 2
      (self.num_waypoints,) = _struct_H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.waypoint_lon)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.waypoint_lon.tostring())
      length = len(self.waypoint_lat)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.waypoint_lat.tostring())
      buff.write(_struct_H.pack(self.num_waypoints))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.waypoint_lon = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.waypoint_lat = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 2
      (self.num_waypoints,) = _struct_H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_H = struct.Struct("<H")
