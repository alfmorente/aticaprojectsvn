/* Auto-generated by genmsg_cpp for file /home/atica/catkin_ws/src/CITIUS/CITIUS_Control_Communication/srv/srv_autofocusMode.srv */
#ifndef CITIUS_CONTROL_COMMUNICATION_SERVICE_SRV_AUTOFOCUSMODE_H
#define CITIUS_CONTROL_COMMUNICATION_SERVICE_SRV_AUTOFOCUSMODE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace CITIUS_Control_Communication
{
template <class ContainerAllocator>
struct srv_autofocusModeRequest_ {
  typedef srv_autofocusModeRequest_<ContainerAllocator> Type;

  srv_autofocusModeRequest_()
  : autofocus(false)
  {
  }

  srv_autofocusModeRequest_(const ContainerAllocator& _alloc)
  : autofocus(false)
  {
  }

  typedef uint8_t _autofocus_type;
  uint8_t autofocus;


  typedef boost::shared_ptr< ::CITIUS_Control_Communication::srv_autofocusModeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::CITIUS_Control_Communication::srv_autofocusModeRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct srv_autofocusModeRequest
typedef  ::CITIUS_Control_Communication::srv_autofocusModeRequest_<std::allocator<void> > srv_autofocusModeRequest;

typedef boost::shared_ptr< ::CITIUS_Control_Communication::srv_autofocusModeRequest> srv_autofocusModeRequestPtr;
typedef boost::shared_ptr< ::CITIUS_Control_Communication::srv_autofocusModeRequest const> srv_autofocusModeRequestConstPtr;



template <class ContainerAllocator>
struct srv_autofocusModeResponse_ {
  typedef srv_autofocusModeResponse_<ContainerAllocator> Type;

  srv_autofocusModeResponse_()
  : ret(false)
  {
  }

  srv_autofocusModeResponse_(const ContainerAllocator& _alloc)
  : ret(false)
  {
  }

  typedef uint8_t _ret_type;
  uint8_t ret;


  typedef boost::shared_ptr< ::CITIUS_Control_Communication::srv_autofocusModeResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::CITIUS_Control_Communication::srv_autofocusModeResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct srv_autofocusModeResponse
typedef  ::CITIUS_Control_Communication::srv_autofocusModeResponse_<std::allocator<void> > srv_autofocusModeResponse;

typedef boost::shared_ptr< ::CITIUS_Control_Communication::srv_autofocusModeResponse> srv_autofocusModeResponsePtr;
typedef boost::shared_ptr< ::CITIUS_Control_Communication::srv_autofocusModeResponse const> srv_autofocusModeResponseConstPtr;


struct srv_autofocusMode
{

typedef srv_autofocusModeRequest Request;
typedef srv_autofocusModeResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct srv_autofocusMode
} // namespace CITIUS_Control_Communication

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::CITIUS_Control_Communication::srv_autofocusModeRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::CITIUS_Control_Communication::srv_autofocusModeRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::CITIUS_Control_Communication::srv_autofocusModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "669ab5da94726809bcf7419be8583b04";
  }

  static const char* value(const  ::CITIUS_Control_Communication::srv_autofocusModeRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x669ab5da94726809ULL;
  static const uint64_t static_value2 = 0xbcf7419be8583b04ULL;
};

template<class ContainerAllocator>
struct DataType< ::CITIUS_Control_Communication::srv_autofocusModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CITIUS_Control_Communication/srv_autofocusModeRequest";
  }

  static const char* value(const  ::CITIUS_Control_Communication::srv_autofocusModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::CITIUS_Control_Communication::srv_autofocusModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool autofocus\n\
\n\
";
  }

  static const char* value(const  ::CITIUS_Control_Communication::srv_autofocusModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::CITIUS_Control_Communication::srv_autofocusModeRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::CITIUS_Control_Communication::srv_autofocusModeResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::CITIUS_Control_Communication::srv_autofocusModeResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::CITIUS_Control_Communication::srv_autofocusModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e2cc9e9d8c464550830df49c160979ad";
  }

  static const char* value(const  ::CITIUS_Control_Communication::srv_autofocusModeResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe2cc9e9d8c464550ULL;
  static const uint64_t static_value2 = 0x830df49c160979adULL;
};

template<class ContainerAllocator>
struct DataType< ::CITIUS_Control_Communication::srv_autofocusModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CITIUS_Control_Communication/srv_autofocusModeResponse";
  }

  static const char* value(const  ::CITIUS_Control_Communication::srv_autofocusModeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::CITIUS_Control_Communication::srv_autofocusModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool ret\n\
\n\
\n\
";
  }

  static const char* value(const  ::CITIUS_Control_Communication::srv_autofocusModeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::CITIUS_Control_Communication::srv_autofocusModeResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::CITIUS_Control_Communication::srv_autofocusModeRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.autofocus);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct srv_autofocusModeRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::CITIUS_Control_Communication::srv_autofocusModeResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ret);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct srv_autofocusModeResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<CITIUS_Control_Communication::srv_autofocusMode> {
  static const char* value() 
  {
    return "89ae402f3ba9f97f2f271d895d5d4ddd";
  }

  static const char* value(const CITIUS_Control_Communication::srv_autofocusMode&) { return value(); } 
};

template<>
struct DataType<CITIUS_Control_Communication::srv_autofocusMode> {
  static const char* value() 
  {
    return "CITIUS_Control_Communication/srv_autofocusMode";
  }

  static const char* value(const CITIUS_Control_Communication::srv_autofocusMode&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<CITIUS_Control_Communication::srv_autofocusModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "89ae402f3ba9f97f2f271d895d5d4ddd";
  }

  static const char* value(const CITIUS_Control_Communication::srv_autofocusModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<CITIUS_Control_Communication::srv_autofocusModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CITIUS_Control_Communication/srv_autofocusMode";
  }

  static const char* value(const CITIUS_Control_Communication::srv_autofocusModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<CITIUS_Control_Communication::srv_autofocusModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "89ae402f3ba9f97f2f271d895d5d4ddd";
  }

  static const char* value(const CITIUS_Control_Communication::srv_autofocusModeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<CITIUS_Control_Communication::srv_autofocusModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CITIUS_Control_Communication/srv_autofocusMode";
  }

  static const char* value(const CITIUS_Control_Communication::srv_autofocusModeResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CITIUS_CONTROL_COMMUNICATION_SERVICE_SRV_AUTOFOCUSMODE_H

