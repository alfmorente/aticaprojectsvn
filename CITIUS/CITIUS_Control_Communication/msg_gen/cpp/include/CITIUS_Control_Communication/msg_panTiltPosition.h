/* Auto-generated by genmsg_cpp for file /home/atica/catkin_ws/src/CITIUS/CITIUS_Control_Communication/msg/msg_panTiltPosition.msg */
#ifndef CITIUS_CONTROL_COMMUNICATION_MESSAGE_MSG_PANTILTPOSITION_H
#define CITIUS_CONTROL_COMMUNICATION_MESSAGE_MSG_PANTILTPOSITION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace CITIUS_Control_Communication
{
template <class ContainerAllocator>
struct msg_panTiltPosition_ {
  typedef msg_panTiltPosition_<ContainerAllocator> Type;

  msg_panTiltPosition_()
  : panPosition(0)
  , tiltPosition(0)
  {
  }

  msg_panTiltPosition_(const ContainerAllocator& _alloc)
  : panPosition(0)
  , tiltPosition(0)
  {
  }

  typedef uint16_t _panPosition_type;
  uint16_t panPosition;

  typedef int16_t _tiltPosition_type;
  int16_t tiltPosition;


  typedef boost::shared_ptr< ::CITIUS_Control_Communication::msg_panTiltPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::CITIUS_Control_Communication::msg_panTiltPosition_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct msg_panTiltPosition
typedef  ::CITIUS_Control_Communication::msg_panTiltPosition_<std::allocator<void> > msg_panTiltPosition;

typedef boost::shared_ptr< ::CITIUS_Control_Communication::msg_panTiltPosition> msg_panTiltPositionPtr;
typedef boost::shared_ptr< ::CITIUS_Control_Communication::msg_panTiltPosition const> msg_panTiltPositionConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::CITIUS_Control_Communication::msg_panTiltPosition_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::CITIUS_Control_Communication::msg_panTiltPosition_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace CITIUS_Control_Communication

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::CITIUS_Control_Communication::msg_panTiltPosition_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::CITIUS_Control_Communication::msg_panTiltPosition_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::CITIUS_Control_Communication::msg_panTiltPosition_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4d3b018255f829633b9f2dc37f6c1da8";
  }

  static const char* value(const  ::CITIUS_Control_Communication::msg_panTiltPosition_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4d3b018255f82963ULL;
  static const uint64_t static_value2 = 0x3b9f2dc37f6c1da8ULL;
};

template<class ContainerAllocator>
struct DataType< ::CITIUS_Control_Communication::msg_panTiltPosition_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CITIUS_Control_Communication/msg_panTiltPosition";
  }

  static const char* value(const  ::CITIUS_Control_Communication::msg_panTiltPosition_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::CITIUS_Control_Communication::msg_panTiltPosition_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint16 panPosition\n\
int16 tiltPosition\n\
\n\
";
  }

  static const char* value(const  ::CITIUS_Control_Communication::msg_panTiltPosition_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::CITIUS_Control_Communication::msg_panTiltPosition_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::CITIUS_Control_Communication::msg_panTiltPosition_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.panPosition);
    stream.next(m.tiltPosition);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct msg_panTiltPosition_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::CITIUS_Control_Communication::msg_panTiltPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::CITIUS_Control_Communication::msg_panTiltPosition_<ContainerAllocator> & v) 
  {
    s << indent << "panPosition: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.panPosition);
    s << indent << "tiltPosition: ";
    Printer<int16_t>::stream(s, indent + "  ", v.tiltPosition);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CITIUS_CONTROL_COMMUNICATION_MESSAGE_MSG_PANTILTPOSITION_H

