/* Auto-generated by genmsg_cpp for file /home/atica/catkin_ws/src/CITIUS/CITIUS_Control_Communication/msg/msg_echoesFound.msg */
#ifndef CITIUS_CONTROL_COMMUNICATION_MESSAGE_MSG_ECHOESFOUND_H
#define CITIUS_CONTROL_COMMUNICATION_MESSAGE_MSG_ECHOESFOUND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace CITIUS_Control_Communication
{
template <class ContainerAllocator>
struct msg_echoesFound_ {
  typedef msg_echoesFound_<ContainerAllocator> Type;

  msg_echoesFound_()
  : echoesFound()
  {
    echoesFound.assign(0);
  }

  msg_echoesFound_(const ContainerAllocator& _alloc)
  : echoesFound()
  {
    echoesFound.assign(0);
  }

  typedef boost::array<int16_t, 5>  _echoesFound_type;
  boost::array<int16_t, 5>  echoesFound;


  typedef boost::shared_ptr< ::CITIUS_Control_Communication::msg_echoesFound_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::CITIUS_Control_Communication::msg_echoesFound_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct msg_echoesFound
typedef  ::CITIUS_Control_Communication::msg_echoesFound_<std::allocator<void> > msg_echoesFound;

typedef boost::shared_ptr< ::CITIUS_Control_Communication::msg_echoesFound> msg_echoesFoundPtr;
typedef boost::shared_ptr< ::CITIUS_Control_Communication::msg_echoesFound const> msg_echoesFoundConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::CITIUS_Control_Communication::msg_echoesFound_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::CITIUS_Control_Communication::msg_echoesFound_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace CITIUS_Control_Communication

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::CITIUS_Control_Communication::msg_echoesFound_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::CITIUS_Control_Communication::msg_echoesFound_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::CITIUS_Control_Communication::msg_echoesFound_<ContainerAllocator> > {
  static const char* value() 
  {
    return "98ba2f76b1beb9b1da1c2ce72cf28ce7";
  }

  static const char* value(const  ::CITIUS_Control_Communication::msg_echoesFound_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x98ba2f76b1beb9b1ULL;
  static const uint64_t static_value2 = 0xda1c2ce72cf28ce7ULL;
};

template<class ContainerAllocator>
struct DataType< ::CITIUS_Control_Communication::msg_echoesFound_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CITIUS_Control_Communication/msg_echoesFound";
  }

  static const char* value(const  ::CITIUS_Control_Communication::msg_echoesFound_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::CITIUS_Control_Communication::msg_echoesFound_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16[5] echoesFound\n\
\n\
";
  }

  static const char* value(const  ::CITIUS_Control_Communication::msg_echoesFound_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::CITIUS_Control_Communication::msg_echoesFound_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::CITIUS_Control_Communication::msg_echoesFound_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.echoesFound);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct msg_echoesFound_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::CITIUS_Control_Communication::msg_echoesFound_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::CITIUS_Control_Communication::msg_echoesFound_<ContainerAllocator> & v) 
  {
    s << indent << "echoesFound[]" << std::endl;
    for (size_t i = 0; i < v.echoesFound.size(); ++i)
    {
      s << indent << "  echoesFound[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.echoesFound[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // CITIUS_CONTROL_COMMUNICATION_MESSAGE_MSG_ECHOESFOUND_H

