/* Auto-generated by genmsg_cpp for file /home/atica/catkin_ws/src/CITIUS/CITIUS_Control_Communication/msg/msg_electricInfo.msg */
#ifndef CITIUS_CONTROL_COMMUNICATION_MESSAGE_MSG_ELECTRICINFO_H
#define CITIUS_CONTROL_COMMUNICATION_MESSAGE_MSG_ELECTRICINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace CITIUS_Control_Communication
{
template <class ContainerAllocator>
struct msg_electricInfo_ {
  typedef msg_electricInfo_<ContainerAllocator> Type;

  msg_electricInfo_()
  : battery_level(0)
  , battery_voltage(0)
  , battery_current(0)
  , battery_temperature(0)
  , supply_alarms(0)
  {
  }

  msg_electricInfo_(const ContainerAllocator& _alloc)
  : battery_level(0)
  , battery_voltage(0)
  , battery_current(0)
  , battery_temperature(0)
  , supply_alarms(0)
  {
  }

  typedef int16_t _battery_level_type;
  int16_t battery_level;

  typedef int16_t _battery_voltage_type;
  int16_t battery_voltage;

  typedef int16_t _battery_current_type;
  int16_t battery_current;

  typedef int16_t _battery_temperature_type;
  int16_t battery_temperature;

  typedef uint8_t _supply_alarms_type;
  uint8_t supply_alarms;


  typedef boost::shared_ptr< ::CITIUS_Control_Communication::msg_electricInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::CITIUS_Control_Communication::msg_electricInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct msg_electricInfo
typedef  ::CITIUS_Control_Communication::msg_electricInfo_<std::allocator<void> > msg_electricInfo;

typedef boost::shared_ptr< ::CITIUS_Control_Communication::msg_electricInfo> msg_electricInfoPtr;
typedef boost::shared_ptr< ::CITIUS_Control_Communication::msg_electricInfo const> msg_electricInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::CITIUS_Control_Communication::msg_electricInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::CITIUS_Control_Communication::msg_electricInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace CITIUS_Control_Communication

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::CITIUS_Control_Communication::msg_electricInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::CITIUS_Control_Communication::msg_electricInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::CITIUS_Control_Communication::msg_electricInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d42ed0969069aa6805076160fc2ef03d";
  }

  static const char* value(const  ::CITIUS_Control_Communication::msg_electricInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd42ed0969069aa68ULL;
  static const uint64_t static_value2 = 0x05076160fc2ef03dULL;
};

template<class ContainerAllocator>
struct DataType< ::CITIUS_Control_Communication::msg_electricInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CITIUS_Control_Communication/msg_electricInfo";
  }

  static const char* value(const  ::CITIUS_Control_Communication::msg_electricInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::CITIUS_Control_Communication::msg_electricInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16 battery_level\n\
int16 battery_voltage\n\
int16 battery_current\n\
int16 battery_temperature\n\
uint8 supply_alarms\n\
";
  }

  static const char* value(const  ::CITIUS_Control_Communication::msg_electricInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::CITIUS_Control_Communication::msg_electricInfo_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::CITIUS_Control_Communication::msg_electricInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.battery_level);
    stream.next(m.battery_voltage);
    stream.next(m.battery_current);
    stream.next(m.battery_temperature);
    stream.next(m.supply_alarms);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct msg_electricInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::CITIUS_Control_Communication::msg_electricInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::CITIUS_Control_Communication::msg_electricInfo_<ContainerAllocator> & v) 
  {
    s << indent << "battery_level: ";
    Printer<int16_t>::stream(s, indent + "  ", v.battery_level);
    s << indent << "battery_voltage: ";
    Printer<int16_t>::stream(s, indent + "  ", v.battery_voltage);
    s << indent << "battery_current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.battery_current);
    s << indent << "battery_temperature: ";
    Printer<int16_t>::stream(s, indent + "  ", v.battery_temperature);
    s << indent << "supply_alarms: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.supply_alarms);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CITIUS_CONTROL_COMMUNICATION_MESSAGE_MSG_ELECTRICINFO_H

