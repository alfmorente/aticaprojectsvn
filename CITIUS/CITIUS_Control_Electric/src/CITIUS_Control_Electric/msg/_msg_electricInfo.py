"""autogenerated by genpy from CITIUS_Control_Electric/msg_electricInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class msg_electricInfo(genpy.Message):
  _md5sum = "d42ed0969069aa6805076160fc2ef03d"
  _type = "CITIUS_Control_Electric/msg_electricInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 battery_level
int16 battery_voltage
int16 battery_current
int16 battery_temperature
uint8 supply_alarms
"""
  __slots__ = ['battery_level','battery_voltage','battery_current','battery_temperature','supply_alarms']
  _slot_types = ['int16','int16','int16','int16','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       battery_level,battery_voltage,battery_current,battery_temperature,supply_alarms

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(msg_electricInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.battery_level is None:
        self.battery_level = 0
      if self.battery_voltage is None:
        self.battery_voltage = 0
      if self.battery_current is None:
        self.battery_current = 0
      if self.battery_temperature is None:
        self.battery_temperature = 0
      if self.supply_alarms is None:
        self.supply_alarms = 0
    else:
      self.battery_level = 0
      self.battery_voltage = 0
      self.battery_current = 0
      self.battery_temperature = 0
      self.supply_alarms = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4hB.pack(_x.battery_level, _x.battery_voltage, _x.battery_current, _x.battery_temperature, _x.supply_alarms))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.battery_level, _x.battery_voltage, _x.battery_current, _x.battery_temperature, _x.supply_alarms,) = _struct_4hB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4hB.pack(_x.battery_level, _x.battery_voltage, _x.battery_current, _x.battery_temperature, _x.supply_alarms))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.battery_level, _x.battery_voltage, _x.battery_current, _x.battery_temperature, _x.supply_alarms,) = _struct_4hB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4hB = struct.Struct("<4hB")
