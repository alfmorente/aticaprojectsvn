/* Auto-generated by genmsg_cpp for file /home/atica/catkin_ws/src/CITIUS/CITIUS_Control_Manager/msg/msg_lastExec.msg */
#ifndef CITIUS_CONTROL_MANAGER_MESSAGE_MSG_LASTEXEC_H
#define CITIUS_CONTROL_MANAGER_MESSAGE_MSG_LASTEXEC_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace CITIUS_Control_Manager
{
template <class ContainerAllocator>
struct msg_lastExec_ {
  typedef msg_lastExec_<ContainerAllocator> Type;

  msg_lastExec_()
  : badExec(false)
  {
  }

  msg_lastExec_(const ContainerAllocator& _alloc)
  : badExec(false)
  {
  }

  typedef uint8_t _badExec_type;
  uint8_t badExec;


  typedef boost::shared_ptr< ::CITIUS_Control_Manager::msg_lastExec_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::CITIUS_Control_Manager::msg_lastExec_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct msg_lastExec
typedef  ::CITIUS_Control_Manager::msg_lastExec_<std::allocator<void> > msg_lastExec;

typedef boost::shared_ptr< ::CITIUS_Control_Manager::msg_lastExec> msg_lastExecPtr;
typedef boost::shared_ptr< ::CITIUS_Control_Manager::msg_lastExec const> msg_lastExecConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::CITIUS_Control_Manager::msg_lastExec_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::CITIUS_Control_Manager::msg_lastExec_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace CITIUS_Control_Manager

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::CITIUS_Control_Manager::msg_lastExec_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::CITIUS_Control_Manager::msg_lastExec_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::CITIUS_Control_Manager::msg_lastExec_<ContainerAllocator> > {
  static const char* value() 
  {
    return "817eae779e751c980d6611de3cffc5b9";
  }

  static const char* value(const  ::CITIUS_Control_Manager::msg_lastExec_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x817eae779e751c98ULL;
  static const uint64_t static_value2 = 0x0d6611de3cffc5b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::CITIUS_Control_Manager::msg_lastExec_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CITIUS_Control_Manager/msg_lastExec";
  }

  static const char* value(const  ::CITIUS_Control_Manager::msg_lastExec_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::CITIUS_Control_Manager::msg_lastExec_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool badExec\n\
";
  }

  static const char* value(const  ::CITIUS_Control_Manager::msg_lastExec_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::CITIUS_Control_Manager::msg_lastExec_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::CITIUS_Control_Manager::msg_lastExec_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.badExec);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct msg_lastExec_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::CITIUS_Control_Manager::msg_lastExec_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::CITIUS_Control_Manager::msg_lastExec_<ContainerAllocator> & v) 
  {
    s << indent << "badExec: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.badExec);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CITIUS_CONTROL_MANAGER_MESSAGE_MSG_LASTEXEC_H

