/* Auto-generated by genmsg_cpp for file /home/atica/catkin_ws/src/CITIUS/CITIUS_Control_Manager/srv/srv_electric.srv */
#ifndef CITIUS_CONTROL_MANAGER_SERVICE_SRV_ELECTRIC_H
#define CITIUS_CONTROL_MANAGER_SERVICE_SRV_ELECTRIC_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace CITIUS_Control_Manager
{
template <class ContainerAllocator>
struct srv_electricRequest_ {
  typedef srv_electricRequest_<ContainerAllocator> Type;

  srv_electricRequest_()
  : request(false)
  {
  }

  srv_electricRequest_(const ContainerAllocator& _alloc)
  : request(false)
  {
  }

  typedef uint8_t _request_type;
  uint8_t request;


  typedef boost::shared_ptr< ::CITIUS_Control_Manager::srv_electricRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::CITIUS_Control_Manager::srv_electricRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct srv_electricRequest
typedef  ::CITIUS_Control_Manager::srv_electricRequest_<std::allocator<void> > srv_electricRequest;

typedef boost::shared_ptr< ::CITIUS_Control_Manager::srv_electricRequest> srv_electricRequestPtr;
typedef boost::shared_ptr< ::CITIUS_Control_Manager::srv_electricRequest const> srv_electricRequestConstPtr;



template <class ContainerAllocator>
struct srv_electricResponse_ {
  typedef srv_electricResponse_<ContainerAllocator> Type;

  srv_electricResponse_()
  : batteryLevel(0)
  {
  }

  srv_electricResponse_(const ContainerAllocator& _alloc)
  : batteryLevel(0)
  {
  }

  typedef uint8_t _batteryLevel_type;
  uint8_t batteryLevel;


  typedef boost::shared_ptr< ::CITIUS_Control_Manager::srv_electricResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::CITIUS_Control_Manager::srv_electricResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct srv_electricResponse
typedef  ::CITIUS_Control_Manager::srv_electricResponse_<std::allocator<void> > srv_electricResponse;

typedef boost::shared_ptr< ::CITIUS_Control_Manager::srv_electricResponse> srv_electricResponsePtr;
typedef boost::shared_ptr< ::CITIUS_Control_Manager::srv_electricResponse const> srv_electricResponseConstPtr;


struct srv_electric
{

typedef srv_electricRequest Request;
typedef srv_electricResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct srv_electric
} // namespace CITIUS_Control_Manager

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::CITIUS_Control_Manager::srv_electricRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::CITIUS_Control_Manager::srv_electricRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::CITIUS_Control_Manager::srv_electricRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6f7e5ad6ab0ddf42c5727a195315a470";
  }

  static const char* value(const  ::CITIUS_Control_Manager::srv_electricRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6f7e5ad6ab0ddf42ULL;
  static const uint64_t static_value2 = 0xc5727a195315a470ULL;
};

template<class ContainerAllocator>
struct DataType< ::CITIUS_Control_Manager::srv_electricRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CITIUS_Control_Manager/srv_electricRequest";
  }

  static const char* value(const  ::CITIUS_Control_Manager::srv_electricRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::CITIUS_Control_Manager::srv_electricRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool request\n\
\n\
";
  }

  static const char* value(const  ::CITIUS_Control_Manager::srv_electricRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::CITIUS_Control_Manager::srv_electricRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::CITIUS_Control_Manager::srv_electricResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::CITIUS_Control_Manager::srv_electricResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::CITIUS_Control_Manager::srv_electricResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ae5a30f6ad22a2aa808fcb7ca37db379";
  }

  static const char* value(const  ::CITIUS_Control_Manager::srv_electricResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xae5a30f6ad22a2aaULL;
  static const uint64_t static_value2 = 0x808fcb7ca37db379ULL;
};

template<class ContainerAllocator>
struct DataType< ::CITIUS_Control_Manager::srv_electricResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CITIUS_Control_Manager/srv_electricResponse";
  }

  static const char* value(const  ::CITIUS_Control_Manager::srv_electricResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::CITIUS_Control_Manager::srv_electricResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 batteryLevel\n\
\n\
";
  }

  static const char* value(const  ::CITIUS_Control_Manager::srv_electricResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::CITIUS_Control_Manager::srv_electricResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::CITIUS_Control_Manager::srv_electricRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.request);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct srv_electricRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::CITIUS_Control_Manager::srv_electricResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.batteryLevel);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct srv_electricResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<CITIUS_Control_Manager::srv_electric> {
  static const char* value() 
  {
    return "f931d616e7b5ac515d6f94740d46929b";
  }

  static const char* value(const CITIUS_Control_Manager::srv_electric&) { return value(); } 
};

template<>
struct DataType<CITIUS_Control_Manager::srv_electric> {
  static const char* value() 
  {
    return "CITIUS_Control_Manager/srv_electric";
  }

  static const char* value(const CITIUS_Control_Manager::srv_electric&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<CITIUS_Control_Manager::srv_electricRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f931d616e7b5ac515d6f94740d46929b";
  }

  static const char* value(const CITIUS_Control_Manager::srv_electricRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<CITIUS_Control_Manager::srv_electricRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CITIUS_Control_Manager/srv_electric";
  }

  static const char* value(const CITIUS_Control_Manager::srv_electricRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<CITIUS_Control_Manager::srv_electricResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f931d616e7b5ac515d6f94740d46929b";
  }

  static const char* value(const CITIUS_Control_Manager::srv_electricResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<CITIUS_Control_Manager::srv_electricResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CITIUS_Control_Manager/srv_electric";
  }

  static const char* value(const CITIUS_Control_Manager::srv_electricResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CITIUS_CONTROL_MANAGER_SERVICE_SRV_ELECTRIC_H

