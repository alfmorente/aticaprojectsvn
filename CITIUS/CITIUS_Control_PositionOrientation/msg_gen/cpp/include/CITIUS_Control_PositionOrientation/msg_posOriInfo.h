/* Auto-generated by genmsg_cpp for file /home/atica/catkin_ws/src/CITIUS/CITIUS_Control_PositionOrientation/msg/msg_posOriInfo.msg */
#ifndef CITIUS_CONTROL_POSITIONORIENTATION_MESSAGE_MSG_POSORIINFO_H
#define CITIUS_CONTROL_POSITIONORIENTATION_MESSAGE_MSG_POSORIINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace CITIUS_Control_PositionOrientation
{
template <class ContainerAllocator>
struct msg_posOriInfo_ {
  typedef msg_posOriInfo_<ContainerAllocator> Type;

  msg_posOriInfo_()
  : latitude(0.0)
  , longitude(0.0)
  , altitude(0.0)
  , roll(0.0)
  , pitch(0.0)
  , yaw(0.0)
  {
  }

  msg_posOriInfo_(const ContainerAllocator& _alloc)
  : latitude(0.0)
  , longitude(0.0)
  , altitude(0.0)
  , roll(0.0)
  , pitch(0.0)
  , yaw(0.0)
  {
  }

  typedef double _latitude_type;
  double latitude;

  typedef double _longitude_type;
  double longitude;

  typedef double _altitude_type;
  double altitude;

  typedef double _roll_type;
  double roll;

  typedef double _pitch_type;
  double pitch;

  typedef double _yaw_type;
  double yaw;


  typedef boost::shared_ptr< ::CITIUS_Control_PositionOrientation::msg_posOriInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::CITIUS_Control_PositionOrientation::msg_posOriInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct msg_posOriInfo
typedef  ::CITIUS_Control_PositionOrientation::msg_posOriInfo_<std::allocator<void> > msg_posOriInfo;

typedef boost::shared_ptr< ::CITIUS_Control_PositionOrientation::msg_posOriInfo> msg_posOriInfoPtr;
typedef boost::shared_ptr< ::CITIUS_Control_PositionOrientation::msg_posOriInfo const> msg_posOriInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::CITIUS_Control_PositionOrientation::msg_posOriInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::CITIUS_Control_PositionOrientation::msg_posOriInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace CITIUS_Control_PositionOrientation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::CITIUS_Control_PositionOrientation::msg_posOriInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::CITIUS_Control_PositionOrientation::msg_posOriInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::CITIUS_Control_PositionOrientation::msg_posOriInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ede7c952a0a170756890c7bafc4c4c52";
  }

  static const char* value(const  ::CITIUS_Control_PositionOrientation::msg_posOriInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xede7c952a0a17075ULL;
  static const uint64_t static_value2 = 0x6890c7bafc4c4c52ULL;
};

template<class ContainerAllocator>
struct DataType< ::CITIUS_Control_PositionOrientation::msg_posOriInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CITIUS_Control_PositionOrientation/msg_posOriInfo";
  }

  static const char* value(const  ::CITIUS_Control_PositionOrientation::msg_posOriInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::CITIUS_Control_PositionOrientation::msg_posOriInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 latitude\n\
float64 longitude\n\
float64 altitude\n\
float64 roll\n\
float64 pitch\n\
float64 yaw\n\
\n\
";
  }

  static const char* value(const  ::CITIUS_Control_PositionOrientation::msg_posOriInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::CITIUS_Control_PositionOrientation::msg_posOriInfo_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::CITIUS_Control_PositionOrientation::msg_posOriInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.latitude);
    stream.next(m.longitude);
    stream.next(m.altitude);
    stream.next(m.roll);
    stream.next(m.pitch);
    stream.next(m.yaw);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct msg_posOriInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::CITIUS_Control_PositionOrientation::msg_posOriInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::CITIUS_Control_PositionOrientation::msg_posOriInfo_<ContainerAllocator> & v) 
  {
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CITIUS_CONTROL_POSITIONORIENTATION_MESSAGE_MSG_POSORIINFO_H

