/* Auto-generated by genmsg_cpp for file /home/atica/catkin_ws/src/Common_files/msg/msg_error.msg */
#ifndef COMMON_FILES_MESSAGE_MSG_ERROR_H
#define COMMON_FILES_MESSAGE_MSG_ERROR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Common_files
{
template <class ContainerAllocator>
struct msg_error_ {
  typedef msg_error_<ContainerAllocator> Type;

  msg_error_()
  : id_subsystem(0)
  , id_error(0)
  , type_error(0)
  {
  }

  msg_error_(const ContainerAllocator& _alloc)
  : id_subsystem(0)
  , id_error(0)
  , type_error(0)
  {
  }

  typedef uint8_t _id_subsystem_type;
  uint8_t id_subsystem;

  typedef uint16_t _id_error_type;
  uint16_t id_error;

  typedef uint8_t _type_error_type;
  uint8_t type_error;


  typedef boost::shared_ptr< ::Common_files::msg_error_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Common_files::msg_error_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct msg_error
typedef  ::Common_files::msg_error_<std::allocator<void> > msg_error;

typedef boost::shared_ptr< ::Common_files::msg_error> msg_errorPtr;
typedef boost::shared_ptr< ::Common_files::msg_error const> msg_errorConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Common_files::msg_error_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Common_files::msg_error_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Common_files

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Common_files::msg_error_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Common_files::msg_error_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Common_files::msg_error_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4c66157bef5e8ecc9fc1d60c5e56acf8";
  }

  static const char* value(const  ::Common_files::msg_error_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4c66157bef5e8eccULL;
  static const uint64_t static_value2 = 0x9fc1d60c5e56acf8ULL;
};

template<class ContainerAllocator>
struct DataType< ::Common_files::msg_error_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Common_files/msg_error";
  }

  static const char* value(const  ::Common_files::msg_error_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Common_files::msg_error_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 id_subsystem \n\
uint16 id_error\n\
uint8 type_error  \n\
";
  }

  static const char* value(const  ::Common_files::msg_error_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Common_files::msg_error_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Common_files::msg_error_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id_subsystem);
    stream.next(m.id_error);
    stream.next(m.type_error);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct msg_error_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Common_files::msg_error_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Common_files::msg_error_<ContainerAllocator> & v) 
  {
    s << indent << "id_subsystem: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id_subsystem);
    s << indent << "id_error: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id_error);
    s << indent << "type_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type_error);
  }
};


} // namespace message_operations
} // namespace ros

#endif // COMMON_FILES_MESSAGE_MSG_ERROR_H

