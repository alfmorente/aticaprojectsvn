/* Auto-generated by genmsg_cpp for file /home/atica/catkin_ws/src/Common_files/msg/msg_backup.msg */
#ifndef COMMON_FILES_MESSAGE_MSG_BACKUP_H
#define COMMON_FILES_MESSAGE_MSG_BACKUP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Common_files
{
template <class ContainerAllocator>
struct msg_backup_ {
  typedef msg_backup_<ContainerAllocator> Type;

  msg_backup_()
  : throttle(0)
  , brake(0)
  , steer(0)
  , handbrake(false)
  , gear(0)
  , engine(false)
  , speed(0)
  {
  }

  msg_backup_(const ContainerAllocator& _alloc)
  : throttle(0)
  , brake(0)
  , steer(0)
  , handbrake(false)
  , gear(0)
  , engine(false)
  , speed(0)
  {
  }

  typedef uint8_t _throttle_type;
  uint8_t throttle;

  typedef uint8_t _brake_type;
  uint8_t brake;

  typedef int8_t _steer_type;
  int8_t steer;

  typedef uint8_t _handbrake_type;
  uint8_t handbrake;

  typedef uint8_t _gear_type;
  uint8_t gear;

  typedef uint8_t _engine_type;
  uint8_t engine;

  typedef uint8_t _speed_type;
  uint8_t speed;


  typedef boost::shared_ptr< ::Common_files::msg_backup_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Common_files::msg_backup_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct msg_backup
typedef  ::Common_files::msg_backup_<std::allocator<void> > msg_backup;

typedef boost::shared_ptr< ::Common_files::msg_backup> msg_backupPtr;
typedef boost::shared_ptr< ::Common_files::msg_backup const> msg_backupConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Common_files::msg_backup_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Common_files::msg_backup_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Common_files

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Common_files::msg_backup_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Common_files::msg_backup_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Common_files::msg_backup_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ff8688787aa97766b5311a5e39e25a80";
  }

  static const char* value(const  ::Common_files::msg_backup_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xff8688787aa97766ULL;
  static const uint64_t static_value2 = 0xb5311a5e39e25a80ULL;
};

template<class ContainerAllocator>
struct DataType< ::Common_files::msg_backup_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Common_files/msg_backup";
  }

  static const char* value(const  ::Common_files::msg_backup_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Common_files::msg_backup_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 throttle\n\
uint8 brake\n\
int8 steer\n\
bool handbrake\n\
uint8 gear\n\
bool engine\n\
uint8 speed\n\
";
  }

  static const char* value(const  ::Common_files::msg_backup_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Common_files::msg_backup_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Common_files::msg_backup_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.throttle);
    stream.next(m.brake);
    stream.next(m.steer);
    stream.next(m.handbrake);
    stream.next(m.gear);
    stream.next(m.engine);
    stream.next(m.speed);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct msg_backup_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Common_files::msg_backup_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Common_files::msg_backup_<ContainerAllocator> & v) 
  {
    s << indent << "throttle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.throttle);
    s << indent << "brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake);
    s << indent << "steer: ";
    Printer<int8_t>::stream(s, indent + "  ", v.steer);
    s << indent << "handbrake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.handbrake);
    s << indent << "gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear);
    s << indent << "engine: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.engine);
    s << indent << "speed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speed);
  }
};


} // namespace message_operations
} // namespace ros

#endif // COMMON_FILES_MESSAGE_MSG_BACKUP_H

