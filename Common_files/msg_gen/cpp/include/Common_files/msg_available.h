/* Auto-generated by genmsg_cpp for file /home/atica/catkin_ws/src/Common_files/msg/msg_available.msg */
#ifndef COMMON_FILES_MESSAGE_MSG_AVAILABLE_H
#define COMMON_FILES_MESSAGE_MSG_AVAILABLE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Common_files
{
template <class ContainerAllocator>
struct msg_available_ {
  typedef msg_available_<ContainerAllocator> Type;

  msg_available_()
  : available()
  {
    available.assign(false);
  }

  msg_available_(const ContainerAllocator& _alloc)
  : available()
  {
    available.assign(false);
  }

  typedef boost::array<uint8_t, 13>  _available_type;
  boost::array<uint8_t, 13>  available;


  typedef boost::shared_ptr< ::Common_files::msg_available_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Common_files::msg_available_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct msg_available
typedef  ::Common_files::msg_available_<std::allocator<void> > msg_available;

typedef boost::shared_ptr< ::Common_files::msg_available> msg_availablePtr;
typedef boost::shared_ptr< ::Common_files::msg_available const> msg_availableConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Common_files::msg_available_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Common_files::msg_available_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Common_files

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Common_files::msg_available_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Common_files::msg_available_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Common_files::msg_available_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c7a5549b98bc1534d37670462e49eac6";
  }

  static const char* value(const  ::Common_files::msg_available_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc7a5549b98bc1534ULL;
  static const uint64_t static_value2 = 0xd37670462e49eac6ULL;
};

template<class ContainerAllocator>
struct DataType< ::Common_files::msg_available_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Common_files/msg_available";
  }

  static const char* value(const  ::Common_files::msg_available_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Common_files::msg_available_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool[13] available\n\
";
  }

  static const char* value(const  ::Common_files::msg_available_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Common_files::msg_available_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Common_files::msg_available_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.available);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct msg_available_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Common_files::msg_available_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Common_files::msg_available_<ContainerAllocator> & v) 
  {
    s << indent << "available[]" << std::endl;
    for (size_t i = 0; i < v.available.size(); ++i)
    {
      s << indent << "  available[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.available[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // COMMON_FILES_MESSAGE_MSG_AVAILABLE_H

