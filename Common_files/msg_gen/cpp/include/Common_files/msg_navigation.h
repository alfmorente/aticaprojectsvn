/* Auto-generated by genmsg_cpp for file /home/atica/catkin_ws/src/Common_files/msg/msg_navigation.msg */
#ifndef COMMON_FILES_MESSAGE_MSG_NAVIGATION_H
#define COMMON_FILES_MESSAGE_MSG_NAVIGATION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Common_files
{
template <class ContainerAllocator>
struct msg_navigation_ {
  typedef msg_navigation_<ContainerAllocator> Type;

  msg_navigation_()
  : lineal_velocity_x(0.0)
  , lineal_velocity_y(0.0)
  , lineal_velocity_z(0.0)
  , angular_velocity_x(0.0)
  , angular_velocity_y(0.0)
  , angular_velocity_z(0.0)
  {
  }

  msg_navigation_(const ContainerAllocator& _alloc)
  : lineal_velocity_x(0.0)
  , lineal_velocity_y(0.0)
  , lineal_velocity_z(0.0)
  , angular_velocity_x(0.0)
  , angular_velocity_y(0.0)
  , angular_velocity_z(0.0)
  {
  }

  typedef double _lineal_velocity_x_type;
  double lineal_velocity_x;

  typedef double _lineal_velocity_y_type;
  double lineal_velocity_y;

  typedef double _lineal_velocity_z_type;
  double lineal_velocity_z;

  typedef double _angular_velocity_x_type;
  double angular_velocity_x;

  typedef double _angular_velocity_y_type;
  double angular_velocity_y;

  typedef double _angular_velocity_z_type;
  double angular_velocity_z;


  typedef boost::shared_ptr< ::Common_files::msg_navigation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Common_files::msg_navigation_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct msg_navigation
typedef  ::Common_files::msg_navigation_<std::allocator<void> > msg_navigation;

typedef boost::shared_ptr< ::Common_files::msg_navigation> msg_navigationPtr;
typedef boost::shared_ptr< ::Common_files::msg_navigation const> msg_navigationConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Common_files::msg_navigation_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Common_files::msg_navigation_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Common_files

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Common_files::msg_navigation_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Common_files::msg_navigation_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Common_files::msg_navigation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c59f4019725261608410c3332831e194";
  }

  static const char* value(const  ::Common_files::msg_navigation_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc59f401972526160ULL;
  static const uint64_t static_value2 = 0x8410c3332831e194ULL;
};

template<class ContainerAllocator>
struct DataType< ::Common_files::msg_navigation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Common_files/msg_navigation";
  }

  static const char* value(const  ::Common_files::msg_navigation_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Common_files::msg_navigation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 lineal_velocity_x\n\
float64 lineal_velocity_y\n\
float64 lineal_velocity_z\n\
float64 angular_velocity_x\n\
float64 angular_velocity_y\n\
float64 angular_velocity_z\n\
";
  }

  static const char* value(const  ::Common_files::msg_navigation_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Common_files::msg_navigation_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Common_files::msg_navigation_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.lineal_velocity_x);
    stream.next(m.lineal_velocity_y);
    stream.next(m.lineal_velocity_z);
    stream.next(m.angular_velocity_x);
    stream.next(m.angular_velocity_y);
    stream.next(m.angular_velocity_z);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct msg_navigation_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Common_files::msg_navigation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Common_files::msg_navigation_<ContainerAllocator> & v) 
  {
    s << indent << "lineal_velocity_x: ";
    Printer<double>::stream(s, indent + "  ", v.lineal_velocity_x);
    s << indent << "lineal_velocity_y: ";
    Printer<double>::stream(s, indent + "  ", v.lineal_velocity_y);
    s << indent << "lineal_velocity_z: ";
    Printer<double>::stream(s, indent + "  ", v.lineal_velocity_z);
    s << indent << "angular_velocity_x: ";
    Printer<double>::stream(s, indent + "  ", v.angular_velocity_x);
    s << indent << "angular_velocity_y: ";
    Printer<double>::stream(s, indent + "  ", v.angular_velocity_y);
    s << indent << "angular_velocity_z: ";
    Printer<double>::stream(s, indent + "  ", v.angular_velocity_z);
  }
};


} // namespace message_operations
} // namespace ros

#endif // COMMON_FILES_MESSAGE_MSG_NAVIGATION_H

