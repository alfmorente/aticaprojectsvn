/* Auto-generated by genmsg_cpp for file /home/atica/catkin_ws/src/Modulo_Gest_Sistema/msg/msg_habilitacion_modulo.msg */
#ifndef MODULO_GEST_SISTEMA_MESSAGE_MSG_HABILITACION_MODULO_H
#define MODULO_GEST_SISTEMA_MESSAGE_MSG_HABILITACION_MODULO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Modulo_Gest_Sistema
{
template <class ContainerAllocator>
struct msg_habilitacion_modulo_ {
  typedef msg_habilitacion_modulo_<ContainerAllocator> Type;

  msg_habilitacion_modulo_()
  : id_modulo(0)
  , submodo(0)
  , activo(false)
  {
  }

  msg_habilitacion_modulo_(const ContainerAllocator& _alloc)
  : id_modulo(0)
  , submodo(0)
  , activo(false)
  {
  }

  typedef uint8_t _id_modulo_type;
  uint8_t id_modulo;

  typedef uint8_t _submodo_type;
  uint8_t submodo;

  typedef uint8_t _activo_type;
  uint8_t activo;


  typedef boost::shared_ptr< ::Modulo_Gest_Sistema::msg_habilitacion_modulo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Modulo_Gest_Sistema::msg_habilitacion_modulo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct msg_habilitacion_modulo
typedef  ::Modulo_Gest_Sistema::msg_habilitacion_modulo_<std::allocator<void> > msg_habilitacion_modulo;

typedef boost::shared_ptr< ::Modulo_Gest_Sistema::msg_habilitacion_modulo> msg_habilitacion_moduloPtr;
typedef boost::shared_ptr< ::Modulo_Gest_Sistema::msg_habilitacion_modulo const> msg_habilitacion_moduloConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Modulo_Gest_Sistema::msg_habilitacion_modulo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Modulo_Gest_Sistema::msg_habilitacion_modulo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Modulo_Gest_Sistema

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Modulo_Gest_Sistema::msg_habilitacion_modulo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Modulo_Gest_Sistema::msg_habilitacion_modulo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Modulo_Gest_Sistema::msg_habilitacion_modulo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f3922bf2f9e23d1b3b255e4deb4c7240";
  }

  static const char* value(const  ::Modulo_Gest_Sistema::msg_habilitacion_modulo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf3922bf2f9e23d1bULL;
  static const uint64_t static_value2 = 0x3b255e4deb4c7240ULL;
};

template<class ContainerAllocator>
struct DataType< ::Modulo_Gest_Sistema::msg_habilitacion_modulo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Modulo_Gest_Sistema/msg_habilitacion_modulo";
  }

  static const char* value(const  ::Modulo_Gest_Sistema::msg_habilitacion_modulo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Modulo_Gest_Sistema::msg_habilitacion_modulo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 id_modulo\n\
uint8 submodo\n\
bool activo\n\
";
  }

  static const char* value(const  ::Modulo_Gest_Sistema::msg_habilitacion_modulo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Modulo_Gest_Sistema::msg_habilitacion_modulo_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Modulo_Gest_Sistema::msg_habilitacion_modulo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id_modulo);
    stream.next(m.submodo);
    stream.next(m.activo);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct msg_habilitacion_modulo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Modulo_Gest_Sistema::msg_habilitacion_modulo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Modulo_Gest_Sistema::msg_habilitacion_modulo_<ContainerAllocator> & v) 
  {
    s << indent << "id_modulo: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id_modulo);
    s << indent << "submodo: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.submodo);
    s << indent << "activo: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activo);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MODULO_GEST_SISTEMA_MESSAGE_MSG_HABILITACION_MODULO_H

