/* Auto-generated by genmsg_cpp for file /home/atica/catkin_ws/src/Modulo_TeachMapping/msg/msg_gps.msg */
#ifndef MODULO_TEACHMAPPING_MESSAGE_MSG_GPS_H
#define MODULO_TEACHMAPPING_MESSAGE_MSG_GPS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Modulo_TeachMapping
{
template <class ContainerAllocator>
struct msg_gps_ {
  typedef msg_gps_<ContainerAllocator> Type;

  msg_gps_()
  : latitud(0.0)
  , longitud(0.0)
  , altitud(0.0)
  , pitch(0.0)
  , yaw(0.0)
  , roll(0.0)
  {
  }

  msg_gps_(const ContainerAllocator& _alloc)
  : latitud(0.0)
  , longitud(0.0)
  , altitud(0.0)
  , pitch(0.0)
  , yaw(0.0)
  , roll(0.0)
  {
  }

  typedef float _latitud_type;
  float latitud;

  typedef float _longitud_type;
  float longitud;

  typedef float _altitud_type;
  float altitud;

  typedef float _pitch_type;
  float pitch;

  typedef float _yaw_type;
  float yaw;

  typedef float _roll_type;
  float roll;


  typedef boost::shared_ptr< ::Modulo_TeachMapping::msg_gps_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Modulo_TeachMapping::msg_gps_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct msg_gps
typedef  ::Modulo_TeachMapping::msg_gps_<std::allocator<void> > msg_gps;

typedef boost::shared_ptr< ::Modulo_TeachMapping::msg_gps> msg_gpsPtr;
typedef boost::shared_ptr< ::Modulo_TeachMapping::msg_gps const> msg_gpsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Modulo_TeachMapping::msg_gps_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Modulo_TeachMapping::msg_gps_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Modulo_TeachMapping

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Modulo_TeachMapping::msg_gps_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Modulo_TeachMapping::msg_gps_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Modulo_TeachMapping::msg_gps_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d580e52d6a982a2a25a6c4682d734553";
  }

  static const char* value(const  ::Modulo_TeachMapping::msg_gps_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd580e52d6a982a2aULL;
  static const uint64_t static_value2 = 0x25a6c4682d734553ULL;
};

template<class ContainerAllocator>
struct DataType< ::Modulo_TeachMapping::msg_gps_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Modulo_TeachMapping/msg_gps";
  }

  static const char* value(const  ::Modulo_TeachMapping::msg_gps_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Modulo_TeachMapping::msg_gps_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 latitud\n\
float32 longitud\n\
float32 altitud\n\
float32 pitch\n\
float32 yaw\n\
float32 roll\n\
\n\
";
  }

  static const char* value(const  ::Modulo_TeachMapping::msg_gps_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Modulo_TeachMapping::msg_gps_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Modulo_TeachMapping::msg_gps_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.latitud);
    stream.next(m.longitud);
    stream.next(m.altitud);
    stream.next(m.pitch);
    stream.next(m.yaw);
    stream.next(m.roll);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct msg_gps_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Modulo_TeachMapping::msg_gps_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Modulo_TeachMapping::msg_gps_<ContainerAllocator> & v) 
  {
    s << indent << "latitud: ";
    Printer<float>::stream(s, indent + "  ", v.latitud);
    s << indent << "longitud: ";
    Printer<float>::stream(s, indent + "  ", v.longitud);
    s << indent << "altitud: ";
    Printer<float>::stream(s, indent + "  ", v.altitud);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MODULO_TEACHMAPPING_MESSAGE_MSG_GPS_H

