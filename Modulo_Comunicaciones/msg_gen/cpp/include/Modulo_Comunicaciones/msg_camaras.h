/* Auto-generated by genmsg_cpp for file /home/atica/catkin_ws/src/Modulo_Comunicaciones/msg/msg_camaras.msg */
#ifndef MODULO_COMUNICACIONES_MESSAGE_MSG_CAMARAS_H
#define MODULO_COMUNICACIONES_MESSAGE_MSG_CAMARAS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Modulo_Comunicaciones
{
template <class ContainerAllocator>
struct msg_camaras_ {
  typedef msg_camaras_<ContainerAllocator> Type;

  msg_camaras_()
  : imagen()
  {
  }

  msg_camaras_(const ContainerAllocator& _alloc)
  : imagen(_alloc)
  {
  }

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _imagen_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  imagen;


  typedef boost::shared_ptr< ::Modulo_Comunicaciones::msg_camaras_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Modulo_Comunicaciones::msg_camaras_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct msg_camaras
typedef  ::Modulo_Comunicaciones::msg_camaras_<std::allocator<void> > msg_camaras;

typedef boost::shared_ptr< ::Modulo_Comunicaciones::msg_camaras> msg_camarasPtr;
typedef boost::shared_ptr< ::Modulo_Comunicaciones::msg_camaras const> msg_camarasConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Modulo_Comunicaciones::msg_camaras_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Modulo_Comunicaciones::msg_camaras_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Modulo_Comunicaciones

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Modulo_Comunicaciones::msg_camaras_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Modulo_Comunicaciones::msg_camaras_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Modulo_Comunicaciones::msg_camaras_<ContainerAllocator> > {
  static const char* value() 
  {
    return "14d873e24c34adbd80ad4662f18456c5";
  }

  static const char* value(const  ::Modulo_Comunicaciones::msg_camaras_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x14d873e24c34adbdULL;
  static const uint64_t static_value2 = 0x80ad4662f18456c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::Modulo_Comunicaciones::msg_camaras_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Modulo_Comunicaciones/msg_camaras";
  }

  static const char* value(const  ::Modulo_Comunicaciones::msg_camaras_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Modulo_Comunicaciones::msg_camaras_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8[] imagen\n\
";
  }

  static const char* value(const  ::Modulo_Comunicaciones::msg_camaras_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Modulo_Comunicaciones::msg_camaras_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.imagen);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct msg_camaras_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Modulo_Comunicaciones::msg_camaras_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Modulo_Comunicaciones::msg_camaras_<ContainerAllocator> & v) 
  {
    s << indent << "imagen[]" << std::endl;
    for (size_t i = 0; i < v.imagen.size(); ++i)
    {
      s << indent << "  imagen[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.imagen[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // MODULO_COMUNICACIONES_MESSAGE_MSG_CAMARAS_H

